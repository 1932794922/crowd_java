<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


    <!--    1.配置扫描包  主要是将 service 的包加载到ioc容器中-->
    <context:component-scan base-package="xiaozaiyi.crowd" use-default-filters="true">

        <!--        <context:exclude-filter type="assignable" expression="xiaozaiyi.crowd.security.UserDetailsServiceImpl"/>-->

        <!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!--        <context:exclude-filter type="annotation"-->
        <!--                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>-->
    </context:component-scan>

    <!--加载外部属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" lazy-init="false">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池中保留的最小连接数，默认为：3-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>

        <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    </bean>

    <!--配置SqlSessionFactoryBean 整合 Mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 配置Mybatis的Mapper配置文件位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--装配数据源-->
        <property name="dataSource" ref="dataSource"/>

        <!-- 配置spring插件-->
        <property name="plugins">
            <!-- 配置mybatis分页插件 -->
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--分页合理化参数-->
                        <props>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 配置 mapperScannerConfigurer来扫描Mapper所在的包-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="xiaozaiyi.crowd.mapper"/>
    </bean>

    <bean id="redisClient" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="host" value="127.0.0.1"/>
        <constructor-arg name="port" value="6379"/>
    </bean>

    <!--    &lt;!&ndash; redis数据源 &ndash;&gt;-->
    <!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--        &lt;!&ndash; 最大空闲数 &ndash;&gt;-->
    <!--        <property name="maxIdle" value="${redis.maxIdle}"/>-->
    <!--        &lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
    <!--        <property name="testOnBorrow" value="true"/>-->
    <!--    </bean>-->

    <!-- Spring-redis连接池管理工厂 -->
    <!--spring-data-redis2.0以上的配置-->
    <bean id="redisStandaloneConfiguration"
          class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.dbIndex}"/>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- spring-data-redis2.0 以上建议获取的方式-->
        <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
    </bean>

    <!--手动设置 key  与 value的序列化方式-->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <!-- FastJson -->
    <bean id="serializer" class="xiaozaiyi.crowd.util.FastJsonRedisSerializer">
        <constructor-arg>
            <bean class="java.lang.Object"/>
        </constructor-arg>
    </bean>

    <!--配置jedis模板  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="serializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="serializer"/>
    </bean>


    <!--配置jedis模板  -->
<!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--        <property name="connectionFactory" ref="jedisConnectionFactory"/>-->
<!--        <property name="keySerializer" ref="keySerializer"/>-->
<!--        <property name="valueSerializer" ref="valueSerializer"/>-->
<!--        <property name="hashKeySerializer" ref="keySerializer"/>-->
<!--        <property name="hashValueSerializer" ref="valueSerializer"/>-->
<!--    </bean>-->

    <!-- 也可以StringRedisTemplate  专注于String的操作  -->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--在StringRedisTemplate与redisTemplate不同,可以直接造构造器中传入ConnectionFactory-->
        <constructor-arg name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
    </bean>

</beans>